NRMSE = mean((testing-forecast)^2/scaling^2))
library(ggstance)
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>% group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("log Kelp Cover")+
ggtitle("Average log kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2023, y = -1.0,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 1.0),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_log_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast))) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast)))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("Kelp Cover")+
ggtitle("Average kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2023, y = 0.5,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 0.25),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast))) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
plt_dat <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast)))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("Kelp Cover")+
ggtitle("Average kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2023, y = 0.5,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 0.25),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast)) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
library(ggstance)
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>% group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("log Kelp Cover")+
ggtitle("Average log kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = -1.0,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 1.0),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_log_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast))) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
plt_dat <- dat %>% filter(horizon < 3, fold < 7) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast)))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("Kelp Cover")+
ggtitle("Average kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = 0.5,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 0.25),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast)) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
library(ggstance)
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>% group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("log Kelp Cover")+
ggtitle("Average log kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = -1.0,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 1.0),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_log_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast))) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast)))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("Kelp Cover")+
ggtitle("Average kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = 0.5,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 0.25),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast)) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
library(ggstance)
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>% group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(testing), forecast = mean(forecast))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("log Kelp Cover")+
ggtitle("Average log kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = -1.0,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 1.0),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_log_kelp_last_5.png",
height = 7.0, width = 8.0)
scaling <- dat %>% filter(horizon < 3) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)))
scaling <- sd(scaling$testing)
cor_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast))) %>%
ungroup()%>%group_by(horizon,reg_weight) %>%
summarize(cor_ = cor(testing,forecast),
NRMSE = mean((testing-forecast)^2/scaling^2))
cor_dat$horizon <- plyr::mapvalues(cor_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
plt_dat <- dat %>% filter(horizon < 3, fold < 6) %>%
group_by(year,horizon,reg_weight) %>%
summarize(testing = mean(exp(testing)), forecast = mean(exp(forecast)))
plt_dat$horizon <- plyr::mapvalues(plt_dat$horizon, c(1,2),
c("One year ahead forecast", "Two years ahead forecast"))
ggplot(plt_dat,
aes(x = year, y = forecast, color = reg_weight))+
geom_line(linewidth = 1.25)+
geom_point(mapping = aes(y = testing), color = "black", size = 2.0)+
theme_classic()+
xlab("forecasting horizon")+
ylab("Kelp Cover")+
ggtitle("Average kelp cover")+
facet_wrap(~horizon, ncol = 1)+
scale_color_manual(values = pnw_palette("Bay", n = 5))+
geom_text(data = cor_dat ,#%>% filter(reg_weight == "1e5"),
mapping = aes(x = 2022, y = 0.5,
label = paste0("Reg. weigth ", reg_weight, ": Cor[obs,pred] = ", round(cor_,3), ", NRMSE =  ", round(NRMSE,3)),
group = reg_weight),
position = position_dodgev(height = 0.25),
color = "black")
ggsave("~/github/KelpUDEs/figures/RMSE_time_series_kelp_last_5.png",
height = 7.0, width = 8.0)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- ".csv"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_50_500m_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- "*.csv"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
pattern <- "model2_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
file
gsub(pattern, "", file)
pattern <- "model2_*"
gsub(pattern, "", file)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- "model2_*"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- "model2_*"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_1e[0-9]+_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
for(file in files[2:length(files)]){
dat_i <- read.csv(paste0("~/github/KelpUDEs/results/cv/",file))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(file, pattern))
pattern <- "model2_1e[0-9]+_" # Matches one or more digits
file <- gsub(".csv", "", file )
proc_error <- gsub(pattern, "", file)
dat_i$reg_weight <- log(as.numeric(reg_weight),10)
dat_i$proc_error <- as.numeric(proc_error)
dat <- rbind(dat,dat_i)
}
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- "model2_*"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_1e[0-9]+_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
for(file in files[2:length(files)]){
dat_i <- read.csv(paste0("~/github/KelpUDEs/results/cv/",file))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(file, pattern))
pattern <- "model2_1e[0-9]+_" # Matches one or more digits
file <- gsub(".csv", "", file )
proc_error <- gsub(pattern, "", file)
print(proc_error)
dat_i$reg_weight <- log(as.numeric(reg_weight),10)
dat_i$proc_error <- as.numeric(proc_error)
dat <- rbind(dat,dat_i)
}
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
file_string <- "model2_1e*"
files <- list.files("/Users/johnbuckner/github/KelpUDEs/results/cv")
files <- files[grepl(file_string,files)]
dat <- read.csv(paste0("~/github/KelpUDEs/results/cv/",files[1]))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(files[1], pattern))
pattern <- "model2_1e[0-9]+_*" # Matches one or more digits
file <- gsub(".csv", "", files[1] )
proc_error <- gsub(pattern, "", file)
dat$reg_weight <- log(reg_weight,10)
dat$proc_error <- as.numeric(proc_error)
for(file in files[2:length(files)]){
dat_i <- read.csv(paste0("~/github/KelpUDEs/results/cv/",file))
pattern <- "1e[0-9]+" # Matches one or more digits
reg_weight <- as.numeric(str_extract(file, pattern))
pattern <- "model2_1e[0-9]+_" # Matches one or more digits
file <- gsub(".csv", "", file )
proc_error <- gsub(pattern, "", file)
print(proc_error)
dat_i$reg_weight <- log(as.numeric(reg_weight),10)
dat_i$proc_error <- as.numeric(proc_error)
dat <- rbind(dat,dat_i)
}
ggplot(dat %>% filter(horizon<9),
aes(x=reg_weight,color = horizon, y = abs(exp(forecast)-exp(testing))^2, group =horizon ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
facet_wrap(~proc_error, scale = "free_y")+
viridis::scale_color_viridis()
ggplot(dat %>% filter(horizon<9),
aes(x=reg_weight,color = proc_error, y = abs(exp(forecast)-exp(testing))^2, group = proc_error ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
facet_wrap(~horizon)+
viridis::scale_color_viridis(trans="log10")
ggplot(dat %>% filter(proc_error == 0.05, reg_weight == 4, horizon < 10),
aes(x = testing, y = forecast, color = as.factor(fold)))+
geom_point()+theme_classic()+
geom_abline(aes(intercept = 0, slope = 1))+
facet_wrap(~horizon, ncol = 3)+
scale_color_manual(values = PNWColors::pnw_palette("Bay", n= 10), name = "Fold")+
xlab("Observed")+
ylab("Predicted")
ggplot(dat %>% filter(proc_error == 0.05, reg_weight == 4, horizon < 10),
aes(x = testing, y = forecast, color = as.factor(fold)))+
geom_point()+theme_classic()+
geom_abline(aes(intercept = 0, slope = 1))+
facet_wrap(~horizon, ncol = 3)+
xlab("Observed")+
ylab("Predicted")
ggplot(dat %>% filter(horizon<9),
aes(x=reg_weight,color = proc_error, y = abs(exp(forecast)-exp(testing))^2, group = proc_error ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
facet_wrap(~horizon)+
viridis::scale_color_viridis(trans="log10")
ggplot(dat %>% filter(horizon<9),
aes(x=reg_weight,color = horizon, y = abs(exp(forecast)-exp(testing))^2, group =horizon ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
facet_wrap(~proc_error, scale = "free_y")+
viridis::scale_color_viridis()
ggplot(dat %>% filter(horizon<9),
aes(x=reg_weight,color = horizon, y = abs(exp(forecast)-exp(testing))^2, group =horizon ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
facet_wrap(~proc_error)+
viridis::scale_color_viridis()
ggplot(dat %>% filter(horizon<9, proc_error == 0.05),
aes(x=reg_weight,color = horizon, y = abs(exp(forecast)-exp(testing))^2, group =horizon ))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
viridis::scale_color_viridis()
ggplot(dat %>% filter(horizon<9, proc_error == 0.05),
aes(x=horizon,color = reg_weight, y = abs(exp(forecast)-exp(testing))^2, group = reg_weight))+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",size = 0.5,
position=position_dodge(0.25))+
stat_summary(fun.data = "mean_cl_boot", geom = "line",linewidth = 0.5,
position=position_dodge(0.25))+
viridis::scale_color_viridis(trans="log10")
